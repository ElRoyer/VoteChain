import{s as p}from"./multihashes.7f388a2b.js";import{s as w}from"./multibase.5721e362.js";import{r as S}from"./multicodec.9e8e4a02.js";import{r as N,a as q,b as E}from"./uint8arrays.2e5a3914.js";var l,g;function U(){if(g)return l;g=1;const n=p;return l={checkCIDComponents:function(i){if(i==null)return"null values are not valid CIDs";if(!(i.version===0||i.version===1))return"Invalid version, must be a number equal to 1 or 0";if(typeof i.codec!="string")return"codec must be string";if(i.version===0){if(i.codec!=="dag-pb")return"codec must be 'dag-pb' for CIDv0";if(i.multibaseName!=="base58btc")return"multibaseName must be 'base58btc' for CIDv0"}if(!(i.multihash instanceof Uint8Array))return"multihash must be a Uint8Array";try{n.validate(i.multihash)}catch(u){let o=u.message;return o||(o="Multihash validation failed"),o}}},l}var m,v;function O(){if(v)return m;v=1;const n=p,h=w.exports,i=S(),u=U(),{concat:o}=N,{toString:C}=q,{equals:y}=E,c=i.nameToCode,I=Object.keys(c).reduce((b,t)=>(b[c[t]]=t,b),{}),d=Symbol.for("@ipld/js-cid/CID");class r{constructor(t,e,f,D){if(this.version,this.codec,this.multihash,Object.defineProperty(this,d,{value:!0}),r.isCID(t)){const s=t;this.version=s.version,this.codec=s.codec,this.multihash=s.multihash,this.multibaseName=s.multibaseName||(s.version===0?"base58btc":"base32");return}if(typeof t=="string"){const s=h.isEncoded(t);if(s){const a=h.decode(t);this.version=parseInt(a[0].toString(),16),this.codec=i.getCodec(a.slice(1)),this.multihash=i.rmPrefix(a.slice(1)),this.multibaseName=s}else this.version=0,this.codec="dag-pb",this.multihash=n.fromB58String(t),this.multibaseName="base58btc";r.validateCID(this),Object.defineProperty(this,"string",{value:t});return}if(t instanceof Uint8Array){const s=parseInt(t[0].toString(),16);if(s===1){const a=t;this.version=s,this.codec=i.getCodec(a.slice(1)),this.multihash=i.rmPrefix(a.slice(1)),this.multibaseName="base32"}else this.version=0,this.codec="dag-pb",this.multihash=t,this.multibaseName="base58btc";r.validateCID(this);return}this.version=t,typeof e=="number"&&(e=I[e]),this.codec=e,this.multihash=f,this.multibaseName=D||(t===0?"base58btc":"base32"),r.validateCID(this)}get bytes(){let t=this._bytes;if(!t){if(this.version===0)t=this.multihash;else if(this.version===1){const e=i.getCodeVarint(this.codec);t=o([[1],e,this.multihash],1+e.byteLength+this.multihash.byteLength)}else throw new Error("unsupported version");Object.defineProperty(this,"_bytes",{value:t})}return t}get prefix(){const t=i.getCodeVarint(this.codec),e=n.prefix(this.multihash);return o([[this.version],t,e],1+t.byteLength+e.byteLength)}get code(){return c[this.codec]}toV0(){if(this.codec!=="dag-pb")throw new Error("Cannot convert a non dag-pb CID to CIDv0");const{name:t,length:e}=n.decode(this.multihash);if(t!=="sha2-256")throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");if(e!==32)throw new Error("Cannot convert non 32 byte multihash CID to CIDv0");return new r(0,this.codec,this.multihash)}toV1(){return new r(1,this.codec,this.multihash,this.multibaseName)}toBaseEncodedString(t=this.multibaseName){if(this.string&&this.string.length!==0&&t===this.multibaseName)return this.string;let e;if(this.version===0){if(t!=="base58btc")throw new Error("not supported with CIDv0, to support different bases, please migrate the instance do CIDv1, you can do that through cid.toV1()");e=n.toB58String(this.multihash)}else if(this.version===1)e=C(h.encode(t,this.bytes));else throw new Error("unsupported version");return t===this.multibaseName&&Object.defineProperty(this,"string",{value:e}),e}[Symbol.for("nodejs.util.inspect.custom")](){return"CID("+this.toString()+")"}toString(t){return this.toBaseEncodedString(t)}toJSON(){return{codec:this.codec,version:this.version,hash:this.multihash}}equals(t){return this.codec===t.codec&&this.version===t.version&&y(this.multihash,t.multihash)}static validateCID(t){const e=u.checkCIDComponents(t);if(e)throw new Error(e)}static isCID(t){return t instanceof r||Boolean(t&&t[d])}}return r.codecs=c,m=r,m}export{O as r};
