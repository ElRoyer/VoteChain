var c,f;function P(){if(f)return c;f=1;const l=7;c=class{constructor(){this._bitArrays=[],this._data=[],this._length=0,this._changedLength=!1,this._changedData=!1}set(t,e){let s=this._internalPositionFor(t,!1);if(e===void 0)s!==-1&&(this._unsetInternalPos(s),this._unsetBit(t),this._changedLength=!0,this._changedData=!0);else{let n=!1;s===-1?(s=this._data.length,this._setBit(t),this._changedData=!0):n=!0,this._setInternalPos(s,t,e,n),this._changedLength=!0}}unset(t){this.set(t,void 0)}get(t){this._sortData();const e=this._internalPositionFor(t,!0);if(e!==-1)return this._data[e][1]}push(t){return this.set(this.length,t),this.length}get length(){if(this._sortData(),this._changedLength){const t=this._data[this._data.length-1];this._length=t?t[0]+1:0,this._changedLength=!1}return this._length}forEach(t){let e=0;for(;e<this.length;)t(this.get(e),e,this),e++}map(t){let e=0,s=new Array(this.length);for(;e<this.length;)s[e]=t(this.get(e),e,this),e++;return s}reduce(t,e){let s=0,n=e;for(;s<this.length;){const i=this.get(s);n=t(n,i,s),s++}return n}find(t){let e=0,s,n;for(;e<this.length&&!s;)n=this.get(e),s=t(n),e++;return s?n:void 0}_internalPositionFor(t,e){const s=this._bytePosFor(t,e);if(s>=this._bitArrays.length)return-1;const n=this._bitArrays[s],i=t-s*l;if(!((n&1<<i)>0))return-1;const h=this._bitArrays.slice(0,s).reduce(d,0),o=~(4294967295<<i+1),u=_(n&o);return h+u-1}_bytePosFor(t,e){const s=Math.floor(t/l),n=s+1;for(;!e&&this._bitArrays.length<n;)this._bitArrays.push(0);return s}_setBit(t){const e=this._bytePosFor(t,!1);this._bitArrays[e]|=1<<t-e*l}_unsetBit(t){const e=this._bytePosFor(t,!1);this._bitArrays[e]&=~(1<<t-e*l)}_setInternalPos(t,e,s,n){const i=this._data,r=[e,s];if(n)this._sortData(),i[t]=r;else{if(i.length)if(i[i.length-1][0]>=e)i.push(r);else if(i[0][0]<=e)i.unshift(r);else{const h=Math.round(i.length/2);this._data=i.slice(0,h).concat(r).concat(i.slice(h))}else this._data.push(r);this._changedData=!0,this._changedLength=!0}}_unsetInternalPos(t){this._data.splice(t,1)}_sortData(){this._changedData&&this._data.sort(y),this._changedData=!1}bitField(){const t=[];let e=8,s=0,n=0,i;const r=this._bitArrays.slice();for(;r.length||s;){s===0&&(i=r.shift(),s=7);const o=Math.min(s,e),u=~(255<<o),g=i&u;n|=g<<8-e,i=i>>>o,s-=o,e-=o,(!e||!s&&!r.length)&&(t.push(n),n=0,e=8)}for(var h=t.length-1;h>0&&t[h]===0;h--)t.pop();return t}compactArray(){return this._sortData(),this._data.map(p)}};function d(a,t){return a+_(t)}function _(a){let t=a;return t=t-(t>>1&1431655765),t=(t&858993459)+(t>>2&858993459),(t+(t>>4)&252645135)*16843009>>24}function y(a,t){return a[0]-t[0]}function p(a){return a[1]}return c}export{P as r};
